name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

env:
  REGISTRY: ${{ secrets.CONTAINER_NAME }}    # e.g., registry.digitalocean.com/your-registry
  IMAGE_NAME: ${{ secrets.USERNAME }}/landscape.api

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install doctl and Authenticate
        run: |
          if ! command -v doctl &> /dev/null; then
            echo "doctl not found, installing..."
            curl -sL https://github.com/digitalocean/doctl/releases/download/v1.70.0/doctl-1.70.0-linux-amd64.tar.gz | tar -xzv
            sudo mv doctl /usr/local/bin
          fi
          doctl auth init -t "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}"

      - name: Remove old images
        run: |
          if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Build & Push API Image (Dev)
        uses: docker/build-push-action@v4
        with:
          context: ./src/Landscape.API
          file: ./src/Landscape.API/Landscape.API/Dockerfile
          push: true
          build-args: |
            BUILD_CONFIGURATION=Debug
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Replace image placeholder in docker-compose file
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" docker-compose.prod.yml

      - name: Copy docker-compose file to Droplet
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          source: "docker-compose.prod.yml"
          target: "/app"

      - name: Copy nginx directory to Droplet
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          source: "nginx/"
          target: "/app"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: |
            if ! command -v doctl &> /dev/null; then
              echo "doctl not found, installing..."
              curl -sL https://github.com/digitalocean/doctl/releases/download/v1.70.0/doctl-1.70.0-linux-amd64.tar.gz | tar -xzv
              sudo mv doctl /usr/local/bin
            fi
            doctl auth init -t "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}"
            doctl registry login --expiry-seconds 600
            cd /app
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
